{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["distances","value","label","useStyles","makeStyles","theme","textField","marginLeft","spacing","marginRight","width","numberField","menu","App","classes","React","useState","distance","hour","minute","values","paceMinute","paceSecond","paces","setPaces","handleChange","prop","event","Number","target","Math","floor","className","AppBar","position","Toolbar","IconButton","edge","menuButton","color","aria-label","Typography","variant","title","Container","maxWidth","TextField","id","select","onChange","SelectProps","MenuProps","helperText","margin","map","option","MenuItem","key","type","InputLabelProps","shrink","InputProps","inputProps","min","max","endAdornment","InputAdornment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9ccfe86.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Container from '@material-ui/core/Container';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport './App.css';\n\nconst distances = [\n  {\n    value: 42.195,\n    label: 'フルマラソン（42.195km）',\n  },\n  {\n    value: 30,\n    label: '30km',\n  },\n  {\n    value: 21.0975,\n    label: 'ハーフマラソン（21.0975km）',\n  },\n  {\n    value: 10,\n    label: '10km',\n  },\n  {\n    value: 5,\n    label: '5km',\n  },\n];\n\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 300,\n  },\n  numberField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 150,\n  },\n  menu: {\n    width: 200,\n  },\n}));\n\n\nfunction App() {\n\n  const classes = useStyles();\n  const [values] = React.useState({\n    distance: 42.195,\n    hour: 4,\n    minute: 0,\n  });\n  const [paces, setPaces] = React.useState({\n    paceMinute: 5,\n    paceSecond: 41,\n  });\n\n  const handleChange = prop => event => {\n    values[prop] = Number(event.target.value);\n    // 分数を計算\n    const minute = (values.hour * 60) + values.minute;\n    // 分数を距離で割り、1キロあたりの分数を計算\n    const paceMinute = (minute) / values.distance;\n    // 分数の少数以下に60をかけ秒数を計算\n    const paceSecond = (paceMinute - Math.floor(paceMinute)) * 60\n    setPaces({\n      ...paces,\n      paceMinute: Math.floor(paceMinute),\n      paceSecond: Math.floor(paceSecond),\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h5\" className={classes.title}>\n          Marathon Pace Maker\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container maxWidth=\"sm\">\n        <h2>マラソンペース配分計算</h2>\n        <p>何キロまでどのくらいのペースで走ったら良いの？を教えてくれます</p>\n        <form>\n          <div>\n            <TextField\n              id=\"distance\"\n              select\n              label=\"距離\"\n              className={classes.textField}\n              onChange={handleChange('distance')}\n              value={values.distance}\n              SelectProps={{\n                MenuProps: {\n                  className: classes.menu,\n                },\n              }}\n              helperText=\"走るレースの距離を選択してください\"\n              margin=\"normal\"\n            >\n              {distances.map(option => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n          </div>\n          <div>\n            <TextField\n              id=\"standard-number\"\n              label=\"目標タイム（時間）\"\n              type=\"number\"\n              className={classes.numberField}\n              onChange={handleChange('hour')}\n              value={values.hour}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              InputProps={{\n                inputProps: { min: 0, max: 10 },\n                endAdornment: <InputAdornment position=\"end\">h</InputAdornment>,\n              }}\n              margin=\"normal\"\n            />\n            <TextField\n              id=\"standard-number\"\n              label=\"目標タイム（分）\"\n              type=\"number\"\n              className={classes.numberField}\n              value={values.minute}\n              onChange={handleChange('minute')}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              InputProps={{\n                inputProps: { min: 0, max: 59 },\n                endAdornment: <InputAdornment position=\"end\">m</InputAdornment>,\n              }}\n              margin=\"normal\"\n            />\n          </div>\n        </form>\n        <p>\n          目標をクリアする為には、1kmあたり <strong>\n          {paces.paceMinute}分{paces.paceSecond}秒</strong>\n          で走る必要があります。\n        </p>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}